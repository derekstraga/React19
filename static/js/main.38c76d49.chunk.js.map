{"version":3,"sources":["utils/API.js","components/Search.js","components/NavBar.js","components/TableBody.js","components/ListOfUsers.js","components/Container.js","components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Search","handleSearchChange","className","type","placeholder","aria-label","onChange","e","NavBar","TableBody","users","undefined","name","map","login","phone","picture","dob","email","key","uuid","data-th","first","last","date","dateArray","split","year","join","formatStuff","ListOfUsers","state","order","filteredUsers","labels","width","handleSort","orderedList","setState","sorted","sort","a","b","localeCompare","event","console","log","target","value","filter","filteredList","item","Object","values","toLowerCase","indexOf","API","then","results","data","this","Component","Container","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38c76d49.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=50\");\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Search({ handleSearchChange }) {\r\n  return (\r\n    <div className=\"Search\">\r\n      <form className=\"form-inline\">\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n          onChange={e => handleSearchChange(e)}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Search from \"./Search.js\";\r\n\r\nfunction NavBar({ handleSearchChange }) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-light bg-light\">\r\n     <div>\r\n        <Search handleSearchChange={handleSearchChange} />\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction TableBody({ users }) {\r\n  function formatStuff(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {users[0] !== undefined && users[0].name !== undefined ? (\r\n        users.map(({ login, name, picture, phone, email, dob }) => {\r\n          return (\r\n            <tr key={login.uuid}>\r\n              <td data-th=\"Image\" className=\"align-middle\">\r\n              </td>\r\n              <td data-th=\"Name\" className=\"name-cell align-left\">\r\n                {name.first} {name.last}\r\n              </td>\r\n              <td data-th=\"Phone\" className=\"align-middle\">\r\n                {phone}\r\n                {formatStuff(dob.date)}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default TableBody;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport NavBar from \"./NavBar\";\r\nimport TableBody from \"./TableBody\";\r\n\r\nexport default class ListOfUsers extends Component {\r\n  state = {\r\n    users: [{}],\r\n    order: \"descend\",\r\n    filteredUsers: [{}]\r\n  }\r\n\r\n  labels = [\r\n    { name: \"Image\", width: \"30%\" },\r\n    { name: \"Name\", width: \"40%\" },\r\n    { name: \"Phone\", width: \"30%\" },\r\n  ]\r\n\r\n  handleSort = orderedList => {\r\n    if (this.state.order === \"descend\") {\r\n      this.setState({\r\n        order: \"ascend\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        order: \"descend\"\r\n      })\r\n    }\r\n\r\n    const compareFnc = (a, b) => {\r\n      if (this.state.order === \"ascend\") {\r\n        if (a[orderedList] === undefined) {\r\n          return 1;\r\n        } else if (b[orderedList] === undefined) {\r\n          return -1;\r\n        }\r\n        else if (orderedList === \"name\") {\r\n          return a[orderedList].first.localeCompare(b[orderedList].first);\r\n        } else {\r\n          return a[orderedList] - b[orderedList];\r\n        }\r\n      } else {\r\n        if (a[orderedList] === undefined) {\r\n          return 1;\r\n        } else if (b[orderedList] === undefined) {\r\n          return -1;\r\n        }\r\n        else if (orderedList === \"name\") {\r\n          return b[orderedList].first.localeCompare(a[orderedList].first);\r\n        } else {\r\n          return b[orderedList] - a[orderedList];\r\n        }\r\n      }\r\n\r\n    }\r\n    const sorted = this.state.filteredUsers.sort(compareFnc);\r\n    this.setState({ filteredUsers: sorted });\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    console.log(event.target.value);\r\n    const filter = event.target.value;\r\n    const filteredList = this.state.users.filter(item => {\r\n      let values = Object.values(item)\r\n        .join(\"\")\r\n        .toLowerCase();\r\n      return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    this.setState({ filteredUsers: filteredList });\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getUsers().then(results => {\r\n      this.setState({\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavBar handleSearchChange={this.handleSearchChange} />\r\n        <div className=\"table-body\">\r\n          <TableBody\r\n            labels={this.labels}\r\n            users={this.state.filteredUsers}\r\n            handleSort={this.handleSort}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ListOfUsers from \"./ListOfUsers\";\r\n\r\nexport default class Container extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <ListOfUsers />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h2>Employee Finder</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Container from \"./components/Container\";\r\nimport Header from \"./components/Intro\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Header />\r\n        <Container />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}